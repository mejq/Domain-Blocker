{
  "version": 3,
  "sources": ["../../../micro2/src/app/domain-list.component.ts", "../../../micro2/src/app/domain_blocker.html", "../../../micro2/src/app/domain.service.ts"],
  "sourcesContent": ["import {Component, OnInit} from '@angular/core';\nimport {FormBuilder, FormGroup, FormsModule, Validators} from '@angular/forms';\nimport {DomainBlockService, BlockedDomain} from './domain.service';\nimport {CommonModule} from '@angular/common';\nimport {ReactiveFormsModule} from '@angular/forms';\n\n@Component({\n  standalone: true,\n  selector: 'app-root',\n  templateUrl: 'domain_blocker.html',\n  styleUrls: ['styles.css'],\n  imports: [CommonModule, ReactiveFormsModule, FormsModule]\n})\n\nexport class App implements OnInit {\n\n  resetForminMicro1() {\n    const event = new CustomEvent('reset-formin-micro1');\n    window.dispatchEvent(event);\n  }\n\n  domains: BlockedDomain[] = [];  // Arayüzde görüntülenecek domain list\n  message: string = '';\n\n  constructor(private domainService: DomainBlockService) {}\n\n  ngOnInit(): void {\n    window.addEventListener('add-domains-to-micro2', this.handleAddDomain)\n    //window.addEventListener('domain-changed-from-micro1'.this.handleDomainChange);\n    this.loadBlockedDomains();\n  }\n  ngOnDestroy() {\n    window.removeEventListener('add-domains-to-micro2', this.handleAddDomain);\n  }\n\n  handleAddDomain(event: any) {\n    const newDomain: BlockedDomain = event.detail;\n    if (newDomain && !this.domains.some(d => d.domain === newDomain.domain)) {\n      this.domains.push(newDomain);\n      this.loadBlockedDomains();\n    }\n  }\n\n  loadBlockedDomains() {\n    this.domainService.getBlockedDomains().subscribe({\n      next: (data: BlockedDomain[]) => {\n        this.domains = data.map(item => {\n          return {\n            id: item.id,\n            domain: item.domain,\n            appliedAt: item.appliedAt\n          };\n        });\n        console.log('Parsed domains:', this.domains);\n      },\n      error: (err: any) => {\n        this.message = 'Yükleme hatası: ' + err.message;\n      }\n    });\n  }\n\n  removeDomain(domain: BlockedDomain) {\n    this.domainService.deleteDomain(domain).subscribe({\n      next: () => {\n        this.domains = this.domains.filter(d => {\n          return d !== domain;\n        });\n        this.resetForminMicro1() //micro2 ye event gitti\n        this.loadBlockedDomains();\n      },\n    });\n\n  }\n}\n", "<main>\n  <header class=\"brand-name\">\n    <img class=\"brand-logo\" src=\"../assets/logo.jpg\" alt=\"Logo\"/>\n  </header>\n  <section class=\"content\">\n    <button (click)=\"loadBlockedDomains()\">Refresh Domains</button>\n    <h4>Blocked Domains</h4>\n    <table border=\"1\" style=\"border-collapse: collapse;\">\n      <thead>\n      <tr>\n        <th>Domain</th>\n        <th>Applied At</th>\n        <th></th>\n      </tr>\n      </thead>\n      <tbody>\n      <tr *ngFor=\"let domain of domains\">\n        <td>{{ domain.domain }}</td>\n        <td>{{domain.appliedAt}}</td>\n        <td><button (click)=\"removeDomain(domain)\">Remove</button></td>\n      </tr>\n      </tbody>\n    </table>\n    <p *ngIf=\"message\">{{ message }}</p>\n  </section>\n</main>\n", "import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport {observable, Observable} from 'rxjs';\n\nexport interface BlockedDomain {\n  id: string;\n  domain: string;\n  appliedAt: string;\n}\n@Injectable({\n  providedIn: 'root'\n})\nexport class DomainBlockService {\n  domains: BlockedDomain[] = [];\n  private apiUrl = 'http://localhost:8080/api/domain-block'; // Backend URL'inizi buraya yazın\n\n  constructor(private http: HttpClient) {}\n\n  getBlockedDomains(): Observable<BlockedDomain[]>  {\n    return this.http.get<BlockedDomain[]>(this.apiUrl);\n  }\n\n  deleteDomain(domain: BlockedDomain): Observable<any> {\n    if (!domain || !domain.domain) {\n      console.error('Silme işlemi için domain bilgisi eksik:', domain);\n    }\n    const url = `${this.apiUrl}/${domain.domain}`;\n    console.log('DELETE URL:', url);\n    return this.http.delete(url, {responseType: 'text'});\n  }\n}\n"],
  "mappings": "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",
  "names": []
}
