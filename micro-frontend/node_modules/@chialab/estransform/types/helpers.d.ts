/**
 * Create a empty sourcemap comment.
 */
export function createEmptySourcemapComment(): string;
/**
 * Create a empty module with an empty default object.
 */
export function createEmptyModule(): string;
/**
 * Detect first level identifier for esbuild file loader imports.
 * File could be previously bundled using esbuild, so the first argument of a new URL(something, import.meta.url)
 * is not a literal anymore but an identifier.
 * Here, we are looking for its computed value.
 * @param {import('./parser.js').TokenProcessor} processor The program processor.
 * @param {import('./types.js').Token} id The name of the identifier.
 * @returns {string|undefined} The init token.
 */
export function getIdentifierValue(processor: import("sucrase/dist/types/TokenProcessor.js").default, id: import('./types.js').Token): string | undefined;
/**
 * Get token location.
 * @param {string} code Source code.
 * @param {number} index Token index.
 * @returns A location.
 */
export function getLocation(code: string, index: number): {
    line: number;
    column: number;
};
/**
 * Get a block of tokens.
 * @param {import('./parser.js').TokenProcessor} processor
 * @param {TokenType} [openingToken]
 * @param {TokenType} [closingToken]
 * @returns {import('./types.js').Token[]}
 */
export function getBlock(processor: import("sucrase/dist/types/TokenProcessor.js").default, openingToken?: any, closingToken?: any): import('./types.js').Token[];
/**
 * @param {import('./parser.js').TokenProcessor} processor
 */
export function getStatement(processor: import("sucrase/dist/types/TokenProcessor.js").default): import("sucrase/dist/types/parser/tokenizer/index.js").Token[];
/**
 * Split tokens into function arguments.
 * @param {import('./types.js').Token[]} tokens
 * @returns {import('./types.js').Token[][]}
 */
export function splitArgs(tokens: import('./types.js').Token[]): import('./types.js').Token[][];
/**
 * Extract argument tokens for a function declaration.
 * @param {import('./parser.js').TokenProcessor} processor
 */
export function extractFunctionArguments(processor: import("sucrase/dist/types/TokenProcessor.js").default): {
    index: number;
    type?: import("sucrase/dist/types/parser/tokenizer/types.js").TokenType | undefined;
    contextualKeyword?: import("sucrase/dist/types/parser/tokenizer/keywords.js").ContextualKeyword | undefined;
    start?: number | undefined;
    end?: number | undefined;
    scopeDepth?: number | undefined;
    isType?: boolean | undefined;
    identifierRole?: import("sucrase/dist/types/parser/tokenizer/index.js").IdentifierRole | null | undefined;
    jsxRole?: import("sucrase/dist/types/parser/tokenizer/index.js").JSXRole | null | undefined;
    shadowsGlobal?: boolean | undefined;
    isAsyncOperation?: boolean | undefined;
    contextId?: number | null | undefined;
    rhsEndIndex?: number | null | undefined;
    isExpression?: boolean | undefined;
    numNullishCoalesceStarts?: number | undefined;
    numNullishCoalesceEnds?: number | undefined;
    isOptionalChainStart?: boolean | undefined;
    isOptionalChainEnd?: boolean | undefined;
    subscriptStartIndex?: number | null | undefined;
    nullishStartIndex?: number | null | undefined;
}[][];
/**
 * Move forward in tokens list and return the current token.
 * @param {import('./parser.js').TokenProcessor} processor
 * @returns {import('./types.js').Token|null}
 */
export function getNextToken(processor: import("sucrase/dist/types/TokenProcessor.js").default): import('./types.js').Token | null;
/**
 * Move forward until `)` closes the block.
 * @param {import('./parser.js').TokenProcessor} processor
 */
export function nextBlock(processor: import("sucrase/dist/types/TokenProcessor.js").default): void;
/**
 * Extract comments for a code range delmited by node span.
 * @param {string} code The original code.
 * @param {number} start The start index.
 * @param {number} end The end index.
 */
export function getNodeComments(code: string, start: number, end: number): string[];
