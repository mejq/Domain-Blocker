/**
 * Walk through tokens and wait async visitors.
 *
 * @param {InstanceType<TokenProcessor>} processor
 * @param {(token: import('./types.js').Token, index: number, processor: InstanceType<TokenProcessor>) => void|false|Promise<void|false>} callback
 */
export function walk(processor: InstanceType<typeof import("sucrase/dist/types/TokenProcessor").default>, callback: (token: import('./types.js').Token, index: number, processor: InstanceType<typeof import("sucrase/dist/types/TokenProcessor").default>) => void | false | Promise<void | false>): Promise<void>;
/**
 * @param {string} inputCode The code to parse.
 * @param {string} [filePath] The source file name.
 */
export function parse(inputCode: string, filePath?: string | undefined): {
    program: any;
    nameManager: any;
    helperManager: any;
    processor: import("sucrase/dist/types/TokenProcessor").default;
    helpers: {
        /**
         * @param {string} code
         * @param {number} [index]
         */
        prepend(code: string, index?: number | undefined): void;
        /**
         * @param {string} code
         * @param {number} [index]
         */
        append(code: string, index?: number | undefined): void;
        /**
         * @param {number} start
         * @param {number} end
         * @param {string} code
         */
        overwrite(start: number, end: number, code: string): void;
        isDirty(): boolean;
        /**
         * @param {{ sourcemap?: boolean|'inline'; sourcesContent?: boolean }} options
         */
        generate(options?: {
            sourcemap?: boolean | 'inline';
            sourcesContent?: boolean;
        }): Promise<{
            code: string;
            map: any;
        }>;
    };
};
export const NameManager: any;
export const TokenProcessor: typeof import("sucrase/dist/types/TokenProcessor").default;
