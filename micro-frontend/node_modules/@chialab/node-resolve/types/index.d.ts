/**
 * @typedef {Object} ResolveOptions
 * @property {string[]} [extensions]
 * @property {string[]} [exportsFields]
 * @property {string[]} [mainFields]
 * @property {string[]} [aliasFields]
 * @property {string[]} [conditionNames]
 * @property {boolean} [symlinks]
 * @property {boolean} [preferRelative]
 */
/**
 * @typedef {(specifier: string, importer: string) => Promise<string>} Resolver
 */
/**
 * @typedef {(specifier: string, importer: string) => string|false} SyncResolver
 */
/**
 * A promise based node resolution method based on enhanced-resolve
 * @param {ResolveOptions} [options]
 */
export function createResolver(options?: ResolveOptions | undefined): Resolver;
/**
 * Check if a file is a JavaSript source.
 * @param {string} filePath
 */
export function isJs(filePath: string): boolean;
/**
 * Check if a file is a JSON source.
 * @param {string} filePath
 */
export function isJson(filePath: string): boolean;
/**
 * Check if a file is a CSS source.
 * @param {string} filePath
 */
export function isCss(filePath: string): boolean;
/**
 * Check if a file is an HTML source.
 * @param {string} filePath
 */
export function isHtml(filePath: string): boolean;
/**
 * Resolve module using the fs.
 * @param {string} specifier
 * @param {string} importer
 */
export function fsResolve(specifier: string, importer: string): Promise<string>;
/**
 * Remove the file protocol from a path (the resolver cannot handle it) and search params.
 * @param {string} filePath
 */
export function getFileName(filePath: string): string;
/**
 * Remove the file protocol from a path (the resolver cannot handle it)
 * and return the closest directory for resolution.
 * @param {string} filePath
 */
export function getBasePath(filePath: string): string;
/**
 * Check if the given path is a valid url.
 * @param {string} url
 */
export function isUrl(url: string): boolean;
/**
 * Check if the given source is a relative url.
 * @param {string|undefined} url The source to check.
 */
export function isRelativeUrl(url: string | undefined): boolean;
/**
 * Extract search params from a url.
 * @param {string} source The source url.
 */
export function getSearchParams(source: string): {
    path: string;
    searchParams: URLSearchParams;
};
/**
 * Append a search param to the url.
 * @param {string} source
 * @param {string} param
 * @param {string} value
 */
export function appendSearchParam(source: string, param: string, value: string): string;
/**
 * Check if a search param is available in the url.
 * @param {string} source
 * @param {string} param
 */
export function hasSearchParam(source: string, param: string): boolean;
/**
 * Delete a search param (if available) in the url.
 * @param {string} source
 * @param {string} param
 */
export function removeSearchParam(source: string, param: string): string;
/**
 * Get a search param (if available) in the url.
 * @param {string} source
 * @param {string} param
 */
export function getSearchParam(source: string, param: string): string | null;
export const JS_EXTENSIONS: string[];
export const JSON_EXTENSIONS: string[];
export const CSS_EXTENSIONS: string[];
export const HTML_EXTENSIONS: string[];
export function resolve(specifier: string, importer: string): Promise<string>;
export function styleResolve(specifier: string, importer: string): Promise<string>;
export function browserResolve(specifier: string, importer: string): Promise<string>;
export type ResolveOptions = {
    extensions?: string[] | undefined;
    exportsFields?: string[] | undefined;
    mainFields?: string[] | undefined;
    aliasFields?: string[] | undefined;
    conditionNames?: string[] | undefined;
    symlinks?: boolean | undefined;
    preferRelative?: boolean | undefined;
};
export type Resolver = (specifier: string, importer: string) => Promise<string>;
export type SyncResolver = (specifier: string, importer: string) => string | false;
import glob from 'fast-glob';
import { pkgUp } from 'pkg-up';
import isCore from 'is-core-module';
export { glob, pkgUp, isCore };
