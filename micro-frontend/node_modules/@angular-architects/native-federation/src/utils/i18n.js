"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getI18nConfig = getI18nConfig;
exports.translateFederationArtefacts = translateFederationArtefacts;
const tslib_1 = require("tslib");
const build_1 = require("@softarc/native-federation/build");
const child_process_1 = require("child_process");
const path_1 = tslib_1.__importDefault(require("path"));
const fs_1 = tslib_1.__importDefault(require("fs"));
function getI18nConfig(context) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        var _a;
        const workspaceConfig = (yield context.getProjectMetadata(((_a = context.target) === null || _a === void 0 ? void 0 : _a.project) || ''));
        const i18nConfig = workspaceConfig === null || workspaceConfig === void 0 ? void 0 : workspaceConfig.i18n;
        return i18nConfig;
    });
}
function translateFederationArtefacts(i18n, localize, outputPath, federationResult) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        const neededLocales = Array.isArray(localize)
            ? localize
            : Object.keys(i18n.locales);
        const locales = Object.keys(i18n.locales).filter((locale) => neededLocales.includes(locale));
        if (locales.length === 0) {
            return;
        }
        build_1.logger.info('Writing Translations');
        const translationFiles = locales
            .map((loc) => i18n.locales[loc])
            .map((value) => JSON.stringify(value))
            .join(' ');
        const targetLocales = locales.join(' ');
        const sourceLocale = i18n.sourceLocale;
        const translationOutPath = path_1.default.join(outputPath, 'browser', '{{LOCALE}}');
        const federationFiles = [
            ...federationResult.shared.map((s) => s.outFileName),
            ...federationResult.exposes.map((e) => e.outFileName),
        ];
        // Here, we use a glob with an exhaustive list i/o `"*.js"`
        // to improve performance
        const sourcePattern = '{' + federationFiles.join(',') + '}';
        const sourceLocalePath = path_1.default.join(outputPath, 'browser', sourceLocale);
        const cmd = `node node_modules/.bin/localize-translate -r ${sourceLocalePath} -s "${sourcePattern}" -t ${translationFiles} -o ${translationOutPath} --target-locales ${targetLocales} -l ${sourceLocale}`;
        ensureDistFolders(locales, outputPath);
        copyRemoteEntry(locales, outputPath, sourceLocalePath);
        build_1.logger.debug('Running: ' + cmd);
        execCommand(cmd, 'Successfully translated');
    });
}
function execCommand(cmd, defaultSuccessInfo) {
    try {
        const output = (0, child_process_1.execSync)(cmd);
        build_1.logger.info(output.toString() || defaultSuccessInfo);
    }
    catch (error) {
        build_1.logger.error(error.message);
    }
}
function copyRemoteEntry(locales, outputPath, sourceLocalePath) {
    const remoteEntry = path_1.default.join(sourceLocalePath, 'remoteEntry.json');
    for (const locale of locales) {
        const localePath = path_1.default.join(outputPath, 'browser', locale, 'remoteEntry.json');
        fs_1.default.copyFileSync(remoteEntry, localePath);
    }
}
function ensureDistFolders(locales, outputPath) {
    for (const locale of locales) {
        const localePath = path_1.default.join(outputPath, 'browser', locale);
        fs_1.default.mkdirSync(localePath, { recursive: true });
    }
}
//# sourceMappingURL=i18n.js.map