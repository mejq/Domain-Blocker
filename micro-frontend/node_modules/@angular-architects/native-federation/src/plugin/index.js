"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.federation = void 0;
const tslib_1 = require("tslib");
const fs = tslib_1.__importStar(require("fs"));
const path = tslib_1.__importStar(require("path"));
const mrmime_1 = require("mrmime");
const dev_externals_mixin_1 = require("./dev-externals-mixin");
const externals_skip_list_1 = require("./externals-skip-list");
const build_1 = require("@softarc/native-federation/build");
const federation = (params) => {
    return Object.assign(Object.assign({}, dev_externals_mixin_1.devExternalsMixin), { name: '@module-federation/vite', // required, will show up in warnings and errors
        config(...args) {
            return tslib_1.__awaiter(this, void 0, void 0, function* () {
                yield build_1.federationBuilder.init(params);
                dev_externals_mixin_1.devExternalsMixin.config(...args);
            });
        },
        options(o) {
            o['external'] = (0, externals_skip_list_1.filterExternals)(build_1.federationBuilder.externals);
        },
        closeBundle() {
            return tslib_1.__awaiter(this, void 0, void 0, function* () {
                yield build_1.federationBuilder.build();
            });
        },
        configureServer(server) {
            return tslib_1.__awaiter(this, void 0, void 0, function* () {
                const fedInfoRef = {
                    federationInfo: build_1.federationBuilder.federationInfo,
                };
                yield configureDevServer(server, params, fedInfoRef);
            });
        },
        transformIndexHtml(html) {
            const fragment = '<script src="polyfills.js" type="module-shim">';
            const updated = `
<script type="esms-options">
{
"shimMode": true
}
</script>
<script src="polyfills.js" type="module">
`;
            html = html.replace(/type="module"/g, 'type="module-shim"');
            return html.replace(fragment, updated);
        } });
};
exports.federation = federation;
const configureDevServer = (server, params, fedInfo) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
    yield build_1.federationBuilder.build();
    const op = params.options;
    const dist = path.join(op.workspaceRoot, op.outputPath);
    server.middlewares.use(serveFromDist(dist, fedInfo));
});
const serveFromDist = (dist, fedInfoRef) => {
    const fedFiles = new Set([
        ...fedInfoRef.federationInfo.shared.map((s) => path.join('/', s.outFileName)),
        ...fedInfoRef.federationInfo.exposes.map((e) => path.join('/', e.outFileName)),
        '/remoteEntry.json',
    ]);
    return (req, res, next) => {
        if (!req.url || req.url.endsWith('/index.html') || !fedFiles.has(req.url)) {
            next();
            return;
        }
        const file = path.join(dist, req.url);
        if (fs.existsSync(file) && fs.lstatSync(file).isFile()) {
            res.setHeader('Access-Control-Allow-Origin', '*');
            const type = (0, mrmime_1.lookup)(req.url) || '';
            res.setHeader('Content-Type', type);
            const content = fs.readFileSync(file, 'utf-8');
            //   const modified = enhanceFile(file, content);
            const modified = content;
            res.write(modified);
            res.end();
            return;
        }
        next();
    };
};
// TODO: Unused, to delete?
// const enhanceFile = (fileName: string, src: string): string => {
//   if (fileName.endsWith('remoteEntry.json')) {
//     let remoteEntry = JSON.parse(fs.readFileSync(fileName, 'utf-8'));
//     remoteEntry = {
//       ...remoteEntry,
//       shared: (remoteEntry.shared || []).map((el) => ({
//         ...el,
//         outFileName: el.dev?.entryPoint.includes('/node_modules/')
//           ? el.outFileName
//           : normalize(path.join('@fs', el.dev?.entryPoint || '')),
//       })),
//       exposes: (remoteEntry.exposes || []).map((el) => ({
//         ...el,
//         outFileName: normalize(path.join('@fs', el.dev?.entryPoint || '')),
//       })),
//     };
//     return JSON.stringify(remoteEntry, null, 2);
//   }
//   return src;
// };
// TODO: Unused, to delete?
// const normalize = (path: string): string => {
//   return path.replace(/\\/g, '/');
// };
//# sourceMappingURL=index.js.map