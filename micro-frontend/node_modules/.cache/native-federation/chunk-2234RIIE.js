import { Subscriber } from "@nf-internal/chunk-AKW5RHFP";
// ../node_modules/rxjs/dist/esm5/internal/operators/OperatorSubscriber.js
import { __extends } from "tslib";
function createOperatorSubscriber(destination, onNext, onComplete, onError, onFinalize) {
    return new OperatorSubscriber(destination, onNext, onComplete, onError, onFinalize);
}
var OperatorSubscriber = function (_super) {
    __extends(OperatorSubscriber2, _super);
    function OperatorSubscriber2(destination, onNext, onComplete, onError, onFinalize, shouldUnsubscribe) {
        var _this = _super.call(this, destination) || this;
        _this.onFinalize = onFinalize;
        _this.shouldUnsubscribe = shouldUnsubscribe;
        _this._next = onNext ? function (value) {
            try {
                onNext(value);
            }
            catch (err) {
                destination.error(err);
            }
        } : _super.prototype._next;
        _this._error = onError ? function (err) {
            try {
                onError(err);
            }
            catch (err2) {
                destination.error(err2);
            }
            finally {
                this.unsubscribe();
            }
        } : _super.prototype._error;
        _this._complete = onComplete ? function () {
            try {
                onComplete();
            }
            catch (err) {
                destination.error(err);
            }
            finally {
                this.unsubscribe();
            }
        } : _super.prototype._complete;
        return _this;
    }
    OperatorSubscriber2.prototype.unsubscribe = function () {
        var _a;
        if (!this.shouldUnsubscribe || this.shouldUnsubscribe()) {
            var closed_1 = this.closed;
            _super.prototype.unsubscribe.call(this);
            !closed_1 && ((_a = this.onFinalize) === null || _a === void 0 ? void 0 : _a.call(this));
        }
    };
    return OperatorSubscriber2;
}(Subscriber);
export { createOperatorSubscriber, OperatorSubscriber };
