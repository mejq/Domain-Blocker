"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.violatesEncapsulationRule = void 0;
const fs_path_1 = require("../file-info/fs-path");
const init_1 = require("../main/init");
const has_encapsulation_violations_1 = require("../checks/has-encapsulation-violations");
let cache = {};
let cachedFileInfo;
/**
 * This is the adapter for the ESLint plugin
 *
 * This file needs to store the encapsulation violations
 * in a cache because ESLint calls for every import
 * in a file separately.
 *
 * We need both variables in order to distinguish
 * if we have an existing cache.
 * In case `cache` is empty we can't say if that
 * is because we never or run or because there no
 * deep imports.
 *
 * @param filename Name of the file
 * @param importCommand Import command
 * @param isFirstRun If this is the first run
 * @param fileContent Content of the file
 * @param isLegacyDeepImport If this is coming from the deep import rule
 */
const violatesEncapsulationRule = (filename, importCommand, isFirstRun, fileContent, isLegacyDeepImport) => {
    if (isFirstRun) {
        cache = {};
        cachedFileInfo = undefined;
    }
    if (!cachedFileInfo) {
        const fsPath = (0, fs_path_1.toFsPath)(filename);
        const projectInfo = (0, init_1.init)(fsPath, {
            traverse: false,
            entryFileContent: fileContent,
        });
        cachedFileInfo = projectInfo.fileInfo;
        cache = (0, has_encapsulation_violations_1.hasEncapsulationViolations)(fsPath, projectInfo);
    }
    if (cachedFileInfo.isUnresolvableImport(importCommand)) {
        return `import ${importCommand} cannot be resolved`;
    }
    const imports = Object.keys(cache);
    if (!imports.includes(importCommand)) {
        return '';
    }
    if (isLegacyDeepImport) {
        return "Deep import is not allowed. Use the module's index.ts or path.";
    }
    else {
        const importFileInfo = cache[importCommand];
        return importFileInfo.moduleInfo.hasBarrel
            ? `'${importCommand}' is a deep import from a barrel module. Use the module's barrel file (index.ts) instead.`
            : `'${importCommand}' cannot be imported. It is encapsulated.`;
    }
};
exports.violatesEncapsulationRule = violatesEncapsulationRule;
//# sourceMappingURL=violates-encapsulation-rule.js.map