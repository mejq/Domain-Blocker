import { FsPath } from './fs-path';
export type TsConfigContext = {
    paths: Record<string, FsPath>;
    rootDir: FsPath;
    baseUrl?: FsPath;
};
/**
 * Parses the tsconfig.json file and returns specific information for
 * further processing.
 *
 * Maps paths from the tsconfig.json to `FilePath` where possible.
 * It also traverses through potential parent configs.
 * It also resolves the `baseUrl` - if present - to an `FsPath`.
 *
 * If there are wildcards, the wildcard will be removed from their path value.
 * This is necessary to keep up the FsPath type.
 *
 * It matters, if a `baseUrl` exists or not. It is not by default set to
 * the root directory of the tsconfig.json. That has implications for the
 * TypeScript resolution because static imports only work with a `baseUrl`.
 *
 * @param tsConfigPath path of the tsconfig.json
 */
export declare function getTsConfigContext(tsConfigPath: FsPath): TsConfigContext;
