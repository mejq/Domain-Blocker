"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.toFsPath = exports.isFsPath = void 0;
const getFs_1 = __importDefault(require("../fs/getFs"));
/**
 * Main Check function which is used by `isFsPath` and `toFsPath`.
 * Uses a cache for valid paths.
 */
const fsPathCache = new Set();
const checkPath = (path) => {
    if (fsPathCache.has(path)) {
        return 'valid';
    }
    const fs = (0, getFs_1.default)();
    if (!fs.isAbsolute(path)) {
        return 'not absolute';
    }
    if (!fs.exists(path)) {
        return 'not existing';
    }
    fsPathCache.add(path);
    return 'valid';
};
/**
 * Type Guard which checks if @param path is a valid FsPath
 * @param path
 */
const isFsPath = (path) => {
    return checkPath(path) === 'valid';
};
exports.isFsPath = isFsPath;
/**
 * Maps a path to an FsPath. Throws an error if the path does not exist or is
 * relative.
 */
const toFsPath = (path) => {
    switch (checkPath(path)) {
        case 'not absolute':
            throw new Error(`FsPath: ${path} is not absolute`);
        case 'not existing':
            throw new Error(`FsPath: ${path} does not exist`);
        default:
            return path;
    }
};
exports.toFsPath = toFsPath;
//# sourceMappingURL=fs-path.js.map