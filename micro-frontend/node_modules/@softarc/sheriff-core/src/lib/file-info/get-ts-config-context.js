"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getTsConfigContext = getTsConfigContext;
const getFs_1 = __importDefault(require("../fs/getFs"));
const ts = __importStar(require("typescript"));
const fs_path_1 = require("./fs-path");
const user_error_1 = require("../error/user-error");
const resolve_potential_ts_path_1 = require("./resolve-potential-ts-path");
const typescript_1 = require("typescript");
/**
 * Parses the tsconfig.json file and returns specific information for
 * further processing.
 *
 * Maps paths from the tsconfig.json to `FilePath` where possible.
 * It also traverses through potential parent configs.
 * It also resolves the `baseUrl` - if present - to an `FsPath`.
 *
 * If there are wildcards, the wildcard will be removed from their path value.
 * This is necessary to keep up the FsPath type.
 *
 * It matters, if a `baseUrl` exists or not. It is not by default set to
 * the root directory of the tsconfig.json. That has implications for the
 * TypeScript resolution because static imports only work with a `baseUrl`.
 *
 * @param tsConfigPath path of the tsconfig.json
 */
function getTsConfigContext(tsConfigPath) {
    var _a, _b, _c, _d, _e;
    const fs = (0, getFs_1.default)();
    let currentTsConfigPath = tsConfigPath;
    let currentTsConfigDir = fs.getParent(currentTsConfigPath);
    const paths = {};
    let baseUrl = undefined;
    while (currentTsConfigPath) {
        const configRawContent = fs.readFile(currentTsConfigPath);
        const configContent = ts.readConfigFile(currentTsConfigPath, () => configRawContent);
        const config = configContent.config;
        currentTsConfigDir = fs.getParent(currentTsConfigPath);
        if (baseUrl === undefined && ((_a = config.compilerOptions) === null || _a === void 0 ? void 0 : _a.baseUrl)) {
            baseUrl = (0, fs_path_1.toFsPath)(fs.join(currentTsConfigDir, config.compilerOptions.baseUrl));
        }
        const newPaths = (_c = (_b = config.compilerOptions) === null || _b === void 0 ? void 0 : _b.paths) !== null && _c !== void 0 ? _c : {};
        for (const [key, [value]] of Object.entries(newPaths)) {
            const valueForFsPath = value.endsWith('/*') ? value.slice(0, -2) : value;
            const potentialFilename = fs.join(currentTsConfigDir, (_e = (_d = config.compilerOptions) === null || _d === void 0 ? void 0 : _d.baseUrl) !== null && _e !== void 0 ? _e : './', valueForFsPath);
            if (fs.exists(potentialFilename)) {
                paths[key] = (0, fs_path_1.toFsPath)(potentialFilename);
            }
            else if (!potentialFilename.endsWith('.ts') &&
                fs.exists(potentialFilename + '.ts')) {
                paths[key] = (0, fs_path_1.toFsPath)(potentialFilename + '.ts');
            }
            else {
                throw new user_error_1.InvalidPathError(key, value);
            }
        }
        if (config.extends) {
            // try non-alias exports first
            const potentialExtendsFsPath = fs.join(fs.getParent(currentTsConfigPath), config.extends);
            if (fs.exists(potentialExtendsFsPath)) {
                currentTsConfigPath = (0, fs_path_1.toFsPath)(potentialExtendsFsPath);
            }
            else {
                // try if extends uses an alias
                const resolveFn = (moduleName) => ts.resolveModuleName(moduleName, currentTsConfigDir, {}, typescript_1.sys);
                const parentTsConfigPath = (0, resolve_potential_ts_path_1.resolvePotentialTsPath)(config.extends, paths, resolveFn);
                if (!parentTsConfigPath) {
                    throw new user_error_1.TsExtendsResolutionError(tsConfigPath, config.extends);
                }
                currentTsConfigPath = parentTsConfigPath;
            }
        }
        else {
            break;
        }
    }
    return {
        paths,
        rootDir: currentTsConfigDir,
        baseUrl,
    };
}
//# sourceMappingURL=get-ts-config-context.js.map