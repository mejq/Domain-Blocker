"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.generateTsData = void 0;
const getFs_1 = __importStar(require("../fs/getFs"));
const ts = __importStar(require("typescript"));
const get_ts_config_context_1 = require("./get-ts-config-context");
const fs_path_1 = require("./fs-path");
/**
 * Generates a parsed TypeScript configuration from a given
 * path. The `paths` property will have its values merged
 * with the `baseUrl`.
 *
 * Example:
 *
 * ```json
 * {
 *   baseUrl: './src',
 *   paths: {
 *     'app/*': './app'
 *   }
 * }
 * ```
 *
 * This will return a paths property of `{'app/*': './src/app'}`
 */
const generateTsData = (tsConfigPath) => {
    const configContext = (0, get_ts_config_context_1.getTsConfigContext)(tsConfigPath);
    const fs = (0, getFs_1.default)();
    const cwd = fs.getParent(tsConfigPath);
    const configRawContent = (0, getFs_1.default)().readFile(tsConfigPath);
    const configContent = ts.readConfigFile(tsConfigPath, () => configRawContent);
    const configObject = ts.parseJsonConfigFileContent(configContent, ts.sys, cwd);
    const sys = getTsSys();
    return Object.assign(Object.assign({}, configContext), { configObject, cwd, sys });
};
exports.generateTsData = generateTsData;
function getTsSys() {
    if ((0, getFs_1.isFsVirtualised)()) {
        const fs = (0, getFs_1.default)();
        return {
            fileExists: (path) => fs.exists(path),
            readFile(path) {
                return fs.readFile((0, fs_path_1.toFsPath)(path));
            },
        };
    }
    else {
        return ts.sys;
    }
}
//# sourceMappingURL=generate-ts-data.js.map