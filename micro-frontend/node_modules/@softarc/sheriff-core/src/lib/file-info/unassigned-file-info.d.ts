import { FsPath } from './fs-path';
/**
 * Represents a TypeScript file with its dependencies but does
 * not yet have an assignment to a module.
 *
 * After module assignment is done, it becomes a type `FileInfo`.
 *
 * If an import cannot be resolved, it doesn't throw an error
 * but is added to unresolvableImports.
 *
 * It is up to the consumer, e.g. ESLinter, to decide if that
 * should cause an error or not.
 */
export declare class UnassignedFileInfo {
    #private;
    path: FsPath;
    imports: UnassignedFileInfo[];
    constructor(path: FsPath, imports?: UnassignedFileInfo[]);
    addUnresolvableImport(importCommand: string): void;
    get unresolvableImports(): string[];
    isUnresolvableImport(importCommand: string): boolean;
    hasUnresolvableImports(): boolean;
    addImport(importedFileInfo: UnassignedFileInfo, rawImport: string): void;
    getRawImportForImportedFileInfo(path: FsPath): string;
    addExternalLibrary(libraryImport: string): void;
    getExternalLibraries(): Readonly<string[]>;
}
