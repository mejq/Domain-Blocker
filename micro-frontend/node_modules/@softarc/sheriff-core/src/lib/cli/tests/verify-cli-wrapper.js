"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.verifyCliWrappers = verifyCliWrappers;
const getEntryFromCliOrConfigFile = __importStar(require("../internal/get-entry-from-cli-or-config"));
const handleErrorFile = __importStar(require("../internal/handle-error"));
const vitest_1 = require("vitest");
const project_creator_1 = require("../../test/project-creator");
const ts_config_1 = require("../../test/fixtures/ts-config");
const main_1 = require("../main");
const mock_cli_1 = require("./helpers/mock-cli");
// Helper Functions to avoid redundancy in the CLI commands
function verifyCliWrappers(...args) {
    (0, vitest_1.it)(`should call getEntryFromCliOrConfig`, () => {
        (0, mock_cli_1.mockCli)();
        (0, project_creator_1.createProject)({
            'tsconfig.json': (0, ts_config_1.tsConfig)(),
            src: {
                'main.ts': [''],
            },
        });
        const spy = vitest_1.vitest.spyOn(getEntryFromCliOrConfigFile, 'getEntryFromCliOrConfig');
        (0, main_1.main)(...args.map(String));
        (0, vitest_1.expect)(spy).toHaveBeenCalledWith(...args.slice(1));
    });
    (0, vitest_1.it)('should use the error handler', () => {
        (0, mock_cli_1.mockCli)();
        (0, project_creator_1.createProject)({
            'tsconfig.json': (0, ts_config_1.tsConfig)(),
            src: {
                'main.ts': [''],
            },
        });
        const spy = vitest_1.vitest.spyOn(handleErrorFile, 'handleError');
        (0, main_1.main)(...args.map(String));
        (0, vitest_1.expect)(spy).toHaveBeenCalledOnce();
    });
}
//# sourceMappingURL=verify-cli-wrapper.js.map