"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.mockCli = mockCli;
const vitest_1 = require("vitest");
const cliFile = __importStar(require("../../cli"));
function mockCli() {
    const cli = vitest_1.vitest.spyOn(cliFile, 'cli', 'get');
    const mockedCli = {
        endProcessOk: vitest_1.vitest.fn(),
        endProcessError: vitest_1.vitest.fn(),
        log: vitest_1.vitest.fn(),
        logError: vitest_1.vitest.fn(),
        bold: (message) => `<b>${message}</b>`,
    };
    cli.mockReturnValue(mockedCli);
    const allLogs = () => mockedCli.log.mock.calls.map(([message]) => message).join('\n');
    const allErrorLogs = () => mockedCli.logError.mock.calls.map(([message]) => message).join('\n');
    return { allLogs, allErrorLogs };
}
//# sourceMappingURL=mock-cli.js.map