"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createProject = createProject;
const project_configurator_1 = require("./project-configurator");
const os_1 = require("os");
const crypto = __importStar(require("crypto"));
const getFs_1 = __importStar(require("../fs/getFs"));
const fs_path_1 = require("../file-info/fs-path");
const default_config_1 = require("../config/default-config");
function createProject(fileTree, testDirName = '/project') {
    const fs = (0, getFs_1.useVirtualFs)();
    fs.reset();
    new ProjectCreator().create(fileTree, testDirName);
    return fs;
}
class ProjectCreator {
    constructor() {
        this.fs = (0, getFs_1.default)();
        this.create = (fileTree, testDirName) => {
            if (testDirName === undefined) {
                testDirName = this.fs.join(this.fs.tmpdir(), 'sheriff', crypto.randomUUID());
            }
            else if (this.fs.exists(testDirName)) {
                this.fs.removeDir((0, fs_path_1.toFsPath)(testDirName));
            }
            this.fs.createDir(testDirName);
            this.traverseFileTree(testDirName, fileTree);
        };
        this.traverseFileTree = (currentDir, fileTree) => {
            this.fs.createDir(currentDir);
            for (const child in fileTree) {
                const value = fileTree[child];
                if (Array.isArray(value)) {
                    this.fs.writeFile(`${currentDir}/${child}`, value.map((imp) => `import '${imp}';`).join(os_1.EOL));
                }
                else if (typeof value === 'string') {
                    this.fs.writeFile(`${currentDir}/${child}`, value);
                }
                else if ((0, project_configurator_1.isSheriffConfigContent)(value)) {
                    let serializedConfig = JSON.stringify(serializeEncapsulationPattern(serializeDepRules(Object.assign(Object.assign({}, default_config_1.defaultConfig), value.content))));
                    if (value.content.encapsulationPattern instanceof RegExp) {
                        serializedConfig = serializedConfig.replace(/"Δ.*Δ"/, value.content.encapsulationPattern.toString());
                    }
                    serializedConfig = serializedConfig.replace(/"α([^ω]+)ω"/g, '$1');
                    this.fs.writeFile(`${currentDir}/${child}`, `export const config = ${serializedConfig};`);
                }
                else {
                    this.traverseFileTree(`${currentDir}/${child}`, value);
                }
            }
        };
    }
}
function serializeDepRules(config) {
    return Object.assign(Object.assign({}, config), { depRules: Object.entries(config.depRules).reduce((current, [from, tos]) => (Object.assign(Object.assign({}, current), { [from]: (Array.isArray(tos) ? tos : [tos]).map((matcher) => typeof matcher === 'function' ? `α${matcher.toString()}ω` : matcher) })), {}) });
}
function serializeEncapsulationPattern(config) {
    if (typeof config.encapsulationPattern === 'string') {
        return config;
    }
    else {
        return Object.assign(Object.assign({}, config), { encapsulationPattern: `Δ${config.encapsulationPattern.toString()}Δ` });
    }
}
//# sourceMappingURL=project-creator.js.map