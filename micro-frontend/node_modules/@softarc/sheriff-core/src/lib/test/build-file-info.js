"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.buildFileInfo = buildFileInfo;
const getFs_1 = __importDefault(require("../fs/getFs"));
const fs_path_1 = require("../file-info/fs-path");
const unassigned_file_info_1 = require("../file-info/unassigned-file-info");
/**
 * utility function generate a FileInfo Tree for testing purposes
 * @param path
 * @param imports
 */
function buildFileInfo(path, imports = []) {
    const fs = (0, getFs_1.default)();
    const children = imports.map((entry) => {
        if (Array.isArray(entry) &&
            entry.length === 2 &&
            typeof entry[0] === 'string') {
            const [childPath, childImports] = entry;
            const currentPath = createPath(childPath, path);
            return buildFileInfo(currentPath, childImports);
        }
        else if (typeof entry === 'string') {
            return buildFileInfo(createPath(entry, path), []);
        }
        else {
            throw new Error(`import not in right structure`);
        }
    });
    fs.writeFile(path, '');
    const fileInfo = new unassigned_file_info_1.UnassignedFileInfo((0, fs_path_1.toFsPath)(path));
    for (const child of children) {
        fileInfo.addImport(child, fs.relativeTo(fileInfo.path, child.path));
    }
    return fileInfo;
}
function createPath(path, parentPath) {
    let currentPath = path;
    if (path.startsWith('./')) {
        const parentPaths = parentPath.split('/');
        parentPaths.pop();
        const normalisedPaths = path.split('/').slice(1);
        currentPath = [...parentPaths, ...normalisedPaths].join('/');
    }
    return currentPath;
}
//# sourceMappingURL=build-file-info.js.map