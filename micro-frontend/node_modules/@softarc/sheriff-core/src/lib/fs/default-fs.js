"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.DefaultFs = void 0;
const fs = __importStar(require("fs"));
const os = __importStar(require("os"));
const path = __importStar(require("path"));
const fs_1 = require("./fs");
const fs_path_1 = require("../file-info/fs-path");
class DefaultFs extends fs_1.Fs {
    constructor() {
        super(...arguments);
        this.writeFile = (filename, contents) => {
            fs.writeFileSync(filename, contents);
        };
        this.readFile = (path) => fs.readFileSync(path, { encoding: 'utf-8' }).toString();
        this.removeDir = (path) => {
            fs.rmSync(path, { recursive: true });
        };
        this.createDir = (path) => {
            if (!fs.existsSync(path)) {
                fs.mkdirSync(path, { recursive: true });
            }
        };
        this.tmpdir = () => os.tmpdir();
        this.cwd = () => process.cwd();
        this.findFiles = (directory, filename, found = [], referencePath = '') => {
            const files = fs.readdirSync(directory);
            referencePath = referencePath || directory;
            for (const file of files) {
                const filePath = (0, fs_path_1.toFsPath)(path.join(directory, file));
                const info = fs.lstatSync(filePath);
                if (info.isFile() && file.toLowerCase() === filename.toLowerCase()) {
                    found.push((0, fs_path_1.toFsPath)(filePath));
                }
                if (info.isDirectory()) {
                    this.findFiles(filePath, filename, found, referencePath);
                }
            }
            return found;
        };
        this.findNearestParentFile = (referenceFile, filename) => {
            let current = path.dirname(referenceFile);
            while (current) {
                const files = fs.readdirSync(current);
                for (const file of files) {
                    const filePath = path.join(current, file);
                    const info = fs.lstatSync(filePath);
                    if (info.isFile() && file === filename) {
                        return (0, fs_path_1.toFsPath)(filePath);
                    }
                }
                const parent = path.dirname(current);
                if (parent === current) {
                    break;
                }
                current = parent;
            }
            throw new Error(`cannot find ${filename} near ${referenceFile}`);
        };
        this.isAbsolute = (p) => path.isAbsolute(p);
        this.split = (p) => p.split(path.sep);
        this.print = () => void true;
    }
    appendFile(filename, contents) {
        fs.appendFileSync(filename, contents, { encoding: 'utf-8' });
    }
    readDirectory(directory, filter) {
        return fs
            .readdirSync(directory)
            .map((child) => (0, fs_path_1.toFsPath)(path.join(directory, child)))
            .filter((path) => filter === 'none'
            ? true
            : fs.lstatSync(path).isDirectory());
    }
    exists(path) {
        return fs.existsSync(path);
    }
    reset() {
        return void true;
    }
    isFile(path) {
        return fs.lstatSync(path).isFile();
    }
}
exports.DefaultFs = DefaultFs;
const defaultFs = new DefaultFs();
exports.default = defaultFs;
//# sourceMappingURL=default-fs.js.map