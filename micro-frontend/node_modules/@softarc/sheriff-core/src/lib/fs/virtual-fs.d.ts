import { Fs } from './fs';
import { FsPath } from '../file-info/fs-path';
type FsNodeType = 'file' | 'directory';
interface FsNode {
    parent: FsNode | undefined;
    children: Map<string, FsNode>;
    contents: string;
    type: FsNodeType;
    name: string;
}
export declare class VirtualFs extends Fs {
    #private;
    root: FsNode;
    project: FsNode;
    constructor();
    init(): void;
    readDirectory(path: FsPath, filter?: 'none' | 'directory'): FsPath[];
    findFiles: (path: FsPath, filename: string) => FsPath[];
    createDir: (path: string) => void;
    exists(path: string): path is FsPath;
    writeFile: (path: string, contents: string) => void;
    appendFile(filename: string, contents: string): void;
    readFile: (path: string) => string;
    removeDir: (path: string) => void;
    tmpdir: () => string;
    findNearestParentFile: (referenceFile: FsPath, filename: string) => FsPath;
    isAbsolute: (path: string) => boolean;
    print: (node?: FsNode, indent?: number) => void;
    cwd: () => string;
    reset(): void;
    split(path: string): string[];
    isFile(path: FsPath): boolean;
}
declare const virtualFs: VirtualFs;
export default virtualFs;
