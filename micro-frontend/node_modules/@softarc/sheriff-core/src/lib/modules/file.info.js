"use strict";
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var _FileInfo_imports;
Object.defineProperty(exports, "__esModule", { value: true });
exports.FileInfo = void 0;
/**
 * Central element representing a TypeScript file with its
 * imports and assigned module.
 *
 * Due to ESLint, we can have partial imports (dev is still
 * typing). That's why there is `getRawImportForImportedFileInfo`.
 */
class FileInfo {
    constructor(unassignedFileInfo, moduleInfo, getFileInfo) {
        this.unassignedFileInfo = unassignedFileInfo;
        this.moduleInfo = moduleInfo;
        this.getFileInfo = getFileInfo;
        _FileInfo_imports.set(this, void 0);
    }
    get path() {
        return this.unassignedFileInfo.path;
    }
    get imports() {
        if (__classPrivateFieldGet(this, _FileInfo_imports, "f") === undefined) {
            __classPrivateFieldSet(this, _FileInfo_imports, this.unassignedFileInfo.imports.map((unassignedFileInfo) => this.getFileInfo(unassignedFileInfo.path)), "f");
        }
        return __classPrivateFieldGet(this, _FileInfo_imports, "f");
    }
    /**
     * For unresolvable imports (ESLint while user is typing) we want
     * to get the string as it is in the file.
     */
    getRawImportForImportedFileInfo(path) {
        return this.unassignedFileInfo.getRawImportForImportedFileInfo(path);
    }
    get unresolvableImports() {
        return this.unassignedFileInfo.unresolvableImports;
    }
    isUnresolvableImport(importCommand) {
        return this.unassignedFileInfo.isUnresolvableImport(importCommand);
    }
    hasUnresolvedImports() {
        return this.unassignedFileInfo.hasUnresolvableImports();
    }
    getExternalLibraries() {
        return this.unassignedFileInfo.getExternalLibraries();
    }
}
exports.FileInfo = FileInfo;
_FileInfo_imports = new WeakMap();
//# sourceMappingURL=file.info.js.map