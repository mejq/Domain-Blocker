"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createModules = createModules;
const module_1 = require("./module");
const traverse_unassigned_file_info_1 = __importDefault(require("../file-info/traverse-unassigned-file-info"));
const throw_if_null_1 = __importDefault(require("../util/throw-if-null"));
const fs_path_1 = require("../file-info/fs-path");
const typed_object_functions_1 = require("../util/typed-object-functions");
function createModules(modulePathMap, fileInfoMap, getFileInfo, { entryFileInfo, rootDir, barrelFile }) {
    const moduleMap = (0, typed_object_functions_1.fromEntries)((0, typed_object_functions_1.entries)(modulePathMap).map(([path, hasBarrel]) => [
        path,
        new module_1.Module((0, fs_path_1.toFsPath)(path), fileInfoMap, getFileInfo, false, hasBarrel, barrelFile),
    ]));
    // add root module
    moduleMap[rootDir] = new module_1.Module(rootDir, fileInfoMap, getFileInfo, true, false, barrelFile);
    const modulePaths = (0, typed_object_functions_1.keys)(moduleMap);
    for (const { fileInfo } of (0, traverse_unassigned_file_info_1.default)(entryFileInfo)) {
        const modulePath = findClosestModulePath(fileInfo.path, modulePaths);
        moduleMap[modulePath].addFileInfo(fileInfo);
    }
    return (0, typed_object_functions_1.values)(moduleMap);
}
function findClosestModulePath(path, modulePaths) {
    return (0, throw_if_null_1.default)(modulePaths
        .filter((modulePath) => path.startsWith(modulePath))
        .sort((p1, p2) => (p1.length > p2.length ? -1 : 1))
        .at(0), `findClosestModule for ${path}`);
}
//# sourceMappingURL=create-modules.js.map