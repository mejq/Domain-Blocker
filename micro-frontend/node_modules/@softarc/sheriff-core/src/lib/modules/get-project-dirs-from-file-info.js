"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getProjectDirsFromFileInfo = void 0;
const getFs_1 = __importDefault(require("../fs/getFs"));
const traverse_unassigned_file_info_1 = __importDefault(require("../file-info/traverse-unassigned-file-info"));
const fs_path_1 = require("../file-info/fs-path");
const log_1 = require("../log");
const log = (0, log_1.logger)('core.modules.project-dirs');
const getProjectDirsFromFileInfo = (fileInfo, rootDir) => {
    const fs = (0, getFs_1.default)();
    const rootDirPartsLength = fs.split(rootDir).length;
    const projectDirs = new Set();
    for (const { fileInfo: { path }, } of (0, traverse_unassigned_file_info_1.default)(fileInfo)) {
        if (!path.startsWith(rootDir)) {
            throw new Error(`file ${path} is outside of root directory: ${rootDir}`);
        }
        if (fs.getParent(path) === rootDir) {
            projectDirs.add(rootDir);
            break;
        }
        const parts = fs.split(path);
        const projectDirPart = parts[rootDirPartsLength];
        const projectDir = fs.join(rootDir, projectDirPart);
        projectDirs.add((0, fs_path_1.toFsPath)(projectDir));
    }
    log.info(Array.from(projectDirs).join(', '));
    return Array.from(projectDirs);
};
exports.getProjectDirsFromFileInfo = getProjectDirsFromFileInfo;
//# sourceMappingURL=get-project-dirs-from-file-info.js.map