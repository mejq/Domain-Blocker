import { UnassignedFileInfo } from '../file-info/unassigned-file-info';
import { Module } from './module';
import { FsPath } from '../file-info/fs-path';
/**
 * Central element representing a TypeScript file with its
 * imports and assigned module.
 *
 * Due to ESLint, we can have partial imports (dev is still
 * typing). That's why there is `getRawImportForImportedFileInfo`.
 */
export declare class FileInfo {
    #private;
    private unassignedFileInfo;
    moduleInfo: Module;
    private getFileInfo;
    constructor(unassignedFileInfo: UnassignedFileInfo, moduleInfo: Module, getFileInfo: (fsPath: FsPath) => FileInfo);
    get path(): FsPath;
    get imports(): FileInfo[];
    /**
     * For unresolvable imports (ESLint while user is typing) we want
     * to get the string as it is in the file.
     */
    getRawImportForImportedFileInfo(path: FsPath): string;
    get unresolvableImports(): string[];
    isUnresolvableImport(importCommand: string): boolean;
    hasUnresolvedImports(): boolean;
    getExternalLibraries(): readonly string[];
}
