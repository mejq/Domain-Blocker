"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.init = init;
const fs_path_1 = require("../file-info/fs-path");
const getFs_1 = __importDefault(require("../fs/getFs"));
const generate_ts_data_1 = require("../file-info/generate-ts-data");
const find_config_1 = require("../config/find-config");
const parse_config_1 = require("../config/parse-config");
const parse_project_1 = require("./parse-project");
const initialized_1 = require("./internal/initialized");
const callback_1 = require("./internal/callback");
const default_config_1 = require("../config/default-config");
let config;
function init(entryFile, options = {}) {
    const fullOptions = Object.assign({ traverse: true, returnOnMissingConfig: false }, options);
    const fs = (0, getFs_1.default)();
    const tsConfigPath = (0, fs_path_1.toFsPath)(fs.findNearestParentFile(entryFile, 'tsconfig.json'));
    const tsData = (0, generate_ts_data_1.generateTsData)(tsConfigPath);
    config = getConfig(tsData.rootDir);
    initialized_1.initialized.status = true;
    for (const callback of callback_1.callbacks) {
        callback(config);
    }
    if (config.isConfigFileMissing && options.returnOnMissingConfig) {
        return;
    }
    return Object.assign({ tsData,
        config }, (0, parse_project_1.parseProject)(entryFile, fullOptions.traverse, tsData, config, options.entryFileContent));
}
function getConfig(rootPath) {
    const configFile = (0, find_config_1.findConfig)(rootPath);
    if (configFile) {
        return (0, parse_config_1.parseConfig)(configFile);
    }
    return Object.assign(Object.assign({}, default_config_1.defaultConfig), { isConfigFileMissing: true });
}
//# sourceMappingURL=init.js.map