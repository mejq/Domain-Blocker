"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TsExtendsResolutionError = exports.CollidingEncapsulationSettings = exports.TaggingAndModulesError = exports.MissingModulesWithoutAutoTaggingError = exports.InvalidPlaceholderError = exports.ExistingTagPlaceholderError = exports.TagWithoutValueError = exports.NoAssignedTagError = exports.NoDependencyRuleForTagError = exports.InvalidPathError = exports.UserError = void 0;
class UserError extends Error {
    constructor(code, message) {
        super(message);
        this.code = code;
    }
}
exports.UserError = UserError;
class InvalidPathError extends UserError {
    constructor(pathAlias, path) {
        super('SH-001', `invalid path mapping detected: ${pathAlias}: ${path}. Please verify that the path exists.`);
    }
}
exports.InvalidPathError = InvalidPathError;
class NoDependencyRuleForTagError extends UserError {
    constructor(tag) {
        super('SH-002', `No dependency rule for tag '${tag}' found in sheriff.config.ts`);
    }
}
exports.NoDependencyRuleForTagError = NoDependencyRuleForTagError;
class NoAssignedTagError extends UserError {
    constructor(moduleDir) {
        super('SH-003', `No assigned Tag for '${moduleDir}' in sheriff.config.ts`);
    }
}
exports.NoAssignedTagError = NoAssignedTagError;
class TagWithoutValueError extends UserError {
    constructor(path) {
        super('SH-004', `Tag configuration '/${path}' in sheriff.config.ts has no value`);
    }
}
exports.TagWithoutValueError = TagWithoutValueError;
class ExistingTagPlaceholderError extends UserError {
    constructor(placeholder) {
        super('SH-005', `placeholder for value "${placeholder}" does already exist`);
    }
}
exports.ExistingTagPlaceholderError = ExistingTagPlaceholderError;
class InvalidPlaceholderError extends UserError {
    constructor(placeholder, path) {
        super('SH-006', `cannot find a placeholder for "${placeholder}" in tag configuration. Module: ${path}`);
    }
}
exports.InvalidPlaceholderError = InvalidPlaceholderError;
class MissingModulesWithoutAutoTaggingError extends UserError {
    constructor() {
        super('SH-007', 'sheriff.config.ts must have either modules or autoTagging set to true');
    }
}
exports.MissingModulesWithoutAutoTaggingError = MissingModulesWithoutAutoTaggingError;
class TaggingAndModulesError extends UserError {
    constructor() {
        super('SH-008', 'sheriff.config.ts contains both tagging and modules. Use only modules.');
    }
}
exports.TaggingAndModulesError = TaggingAndModulesError;
class CollidingEncapsulationSettings extends UserError {
    constructor() {
        super('SH-009', 'sheriff.config.ts contains both encapsulatedFolderNameForBarrelLess and encapsulationPatternForBarrellLess. Use encapsulationPatternForBarrellLess.');
    }
}
exports.CollidingEncapsulationSettings = CollidingEncapsulationSettings;
class TsExtendsResolutionError extends UserError {
    constructor(tsConfigPath, extendsPath) {
        super('SH-010', `Cannot resolve path ${extendsPath} of "extends" property in ${tsConfigPath}. Please verify that the path exists.`);
    }
}
exports.TsExtendsResolutionError = TsExtendsResolutionError;
//# sourceMappingURL=user-error.js.map