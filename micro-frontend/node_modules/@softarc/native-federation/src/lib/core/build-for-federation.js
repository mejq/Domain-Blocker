"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.defaultBuildParams = void 0;
exports.buildForFederation = buildForFederation;
const tslib_1 = require("tslib");
const bundle_exposed_and_mappings_1 = require("./bundle-exposed-and-mappings");
const bundle_shared_1 = require("./bundle-shared");
const write_federation_info_1 = require("./write-federation-info");
const write_import_map_1 = require("./write-import-map");
exports.defaultBuildParams = {
    skipMappingsAndExposed: false,
    skipShared: false,
};
let sharedPackageInfoCache = [];
function buildForFederation(config_1, fedOptions_1, externals_1) {
    return tslib_1.__awaiter(this, arguments, void 0, function* (config, fedOptions, externals, buildParams = exports.defaultBuildParams) {
        var _a, _b;
        let artefactInfo;
        if (!buildParams.skipMappingsAndExposed) {
            artefactInfo = yield (0, bundle_exposed_and_mappings_1.bundleExposedAndMappings)(config, fedOptions, externals);
        }
        const exposedInfo = !artefactInfo
            ? (0, bundle_exposed_and_mappings_1.describeExposed)(config, fedOptions)
            : artefactInfo.exposes;
        if (!buildParams.skipShared) {
            const { sharedBrowser, sharedServer, separateBrowser, separateServer } = splitShared(config.shared);
            const sharedPackageInfoBrowser = yield (0, bundle_shared_1.bundleShared)(sharedBrowser, config, fedOptions, externals, 'browser');
            const sharedPackageInfoServer = yield (0, bundle_shared_1.bundleShared)(sharedServer, config, fedOptions, externals, 'node');
            const separatePackageInfoBrowser = yield bundleSeparate(separateBrowser, externals, config, fedOptions, 'browser');
            const separatePackageInfoServer = yield bundleSeparate(separateServer, externals, config, fedOptions, 'node');
            sharedPackageInfoCache = [
                ...sharedPackageInfoBrowser,
                ...sharedPackageInfoServer,
                ...separatePackageInfoBrowser,
                ...separatePackageInfoServer,
            ];
        }
        const sharedMappingInfo = !artefactInfo
            ? (0, bundle_exposed_and_mappings_1.describeSharedMappings)(config, fedOptions)
            : artefactInfo.mappings;
        const sharedInfo = [...sharedPackageInfoCache, ...sharedMappingInfo];
        const buildNotificationsEndpoint = ((_a = fedOptions.buildNotifications) === null || _a === void 0 ? void 0 : _a.enable) && fedOptions.dev
            ? (_b = fedOptions.buildNotifications) === null || _b === void 0 ? void 0 : _b.endpoint
            : undefined;
        const federationInfo = {
            name: config.name,
            shared: sharedInfo,
            exposes: exposedInfo,
            buildNotificationsEndpoint,
        };
        (0, write_federation_info_1.writeFederationInfo)(federationInfo, fedOptions);
        (0, write_import_map_1.writeImportMap)(sharedInfo, fedOptions);
        return federationInfo;
    });
}
function inferPackageFromSecondary(secondary) {
    const parts = secondary.split('/');
    if (secondary.startsWith('@') && parts.length >= 2) {
        return parts[0] + '/' + parts[1];
    }
    return parts[0];
}
function bundleSeparate(separateBrowser, externals, config, fedOptions, platform) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        const result = [];
        for (const key in separateBrowser) {
            const shared = separateBrowser[key];
            const packageName = inferPackageFromSecondary(key);
            const filteredExternals = externals.filter((e) => !e.startsWith(packageName));
            const record = { [key]: shared };
            const buildResult = yield (0, bundle_shared_1.bundleShared)(record, config, fedOptions, filteredExternals, platform);
            buildResult.forEach((item) => result.push(item));
        }
        return result;
    });
}
function splitShared(shared) {
    const sharedServer = {};
    const sharedBrowser = {};
    const separateBrowser = {};
    const separateServer = {};
    for (const key in shared) {
        const obj = shared[key];
        if (obj.platform === 'node' && obj.build === 'default') {
            sharedServer[key] = obj;
        }
        else if (obj.platform === 'node' && obj.build === 'separate') {
            separateServer[key] = obj;
        }
        else if (obj.platform === 'browser' && obj.build === 'default') {
            sharedBrowser[key] = obj;
        }
        else {
            separateBrowser[key] = obj;
        }
    }
    return {
        sharedBrowser,
        sharedServer,
        separateBrowser,
        separateServer,
    };
}
//# sourceMappingURL=build-for-federation.js.map