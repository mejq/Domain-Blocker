"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.PREPARED_DEFAULT_SKIP_LIST = exports.DEFAULT_SKIP_LIST = void 0;
exports.prepareSkipList = prepareSkipList;
exports.isInSkipList = isInSkipList;
exports.DEFAULT_SKIP_LIST = [
    '@softarc/native-federation-runtime',
    '@softarc/native-federation',
    '@softarc/native-federation-core',
    '@softarc/native-federation-node',
    '@softarc/native-federation-esbuild',
    '@angular-architects/native-federation',
    '@angular-architects/native-federation-runtime',
    'es-module-shims',
    'zone.js',
    'tslib/',
    '@angular/localize',
    '@angular/localize/init',
    '@angular/localize/tools',
    (pkg) => pkg.startsWith('rxjs/internal'),
    // '@angular/platform-server',
    // '@angular/platform-server/init',
    // '@angular/ssr',
    /\/schematics(\/|$)/,
    /^@nx\/angular/,
    (pkg) => pkg.startsWith('@angular/') && !!pkg.match(/\/testing(\/|$)/),
    (pkg) => pkg.startsWith('@types/'),
    'express',
    // (pkg) => pkg.startsWith('@angular/common/locales'),
];
exports.PREPARED_DEFAULT_SKIP_LIST = prepareSkipList(exports.DEFAULT_SKIP_LIST);
function prepareSkipList(skipList) {
    return {
        strings: new Set(skipList.filter((e) => typeof e === 'string')),
        functions: skipList.filter((e) => typeof e === 'function'),
        regexps: skipList.filter((e) => typeof e === 'object'),
    };
}
function isInSkipList(entry, skipList) {
    if (skipList.strings.has(entry)) {
        return true;
    }
    if (skipList.functions.find((f) => f(entry))) {
        return true;
    }
    if (skipList.regexps.find((r) => r.test(entry))) {
        return true;
    }
    return false;
}
//# sourceMappingURL=default-skip-list.js.map