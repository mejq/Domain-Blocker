"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.withNativeFederation = withNativeFederation;
const mapped_paths_1 = require("../utils/mapped-paths");
const share_utils_1 = require("./share-utils");
const default_skip_list_1 = require("../core/default-skip-list");
const logger_1 = require("../utils/logger");
const default_server_deps_list_1 = require("../core/default-server-deps-list");
function withNativeFederation(config) {
    var _a, _b, _c, _d, _e, _f, _g, _h;
    const skip = (0, default_skip_list_1.prepareSkipList)((_a = config.skip) !== null && _a !== void 0 ? _a : []);
    const normalized = {
        name: (_b = config.name) !== null && _b !== void 0 ? _b : '',
        exposes: (_c = config.exposes) !== null && _c !== void 0 ? _c : {},
        shared: normalizeShared(config, skip),
        sharedMappings: normalizeSharedMappings(config, skip),
        skip,
        externals: (_d = config.externals) !== null && _d !== void 0 ? _d : [],
        features: {
            mappingVersion: (_f = (_e = config.features) === null || _e === void 0 ? void 0 : _e.mappingVersion) !== null && _f !== void 0 ? _f : false,
            ignoreUnusedDeps: (_h = (_g = config.features) === null || _g === void 0 ? void 0 : _g.ignoreUnusedDeps) !== null && _h !== void 0 ? _h : false,
        },
    };
    // This is for being backwards compatible
    if (!normalized.features.ignoreUnusedDeps) {
        normalized.shared = filterShared(normalized.shared);
    }
    return normalized;
}
function filterShared(shared) {
    const keys = Object.keys(shared).filter((k) => !k.startsWith('@angular/common/locales'));
    const filtered = keys.reduce((acc, curr) => (Object.assign(Object.assign({}, acc), { [curr]: shared[curr] })), {});
    return filtered;
}
function normalizeShared(config, skip) {
    let result = {};
    const shared = config.shared;
    if (!shared) {
        result = (0, share_utils_1.shareAll)({
            singleton: true,
            strictVersion: true,
            requiredVersion: 'auto',
            platform: 'browser',
        });
    }
    else {
        result = Object.keys(shared).reduce((acc, cur) => {
            var _a, _b, _c, _d, _e;
            return (Object.assign(Object.assign({}, acc), { [cur.replace(/\\/g, '/')]: {
                    requiredVersion: (_a = shared[cur].requiredVersion) !== null && _a !== void 0 ? _a : 'auto',
                    singleton: (_b = shared[cur].singleton) !== null && _b !== void 0 ? _b : false,
                    strictVersion: (_c = shared[cur].strictVersion) !== null && _c !== void 0 ? _c : false,
                    version: shared[cur].version,
                    includeSecondaries: shared[cur].includeSecondaries,
                    packageInfo: shared[cur].packageInfo,
                    platform: (_d = shared[cur].platform) !== null && _d !== void 0 ? _d : getDefaultPlatform(cur),
                    build: (_e = shared[cur].build) !== null && _e !== void 0 ? _e : 'default',
                } }));
        }, {});
        //result = share(result) as Record<string, NormalizedSharedConfig>;
    }
    result = Object.keys(result)
        .filter((key) => !(0, default_skip_list_1.isInSkipList)(key, skip))
        .reduce((acc, cur) => (Object.assign(Object.assign({}, acc), { [cur]: result[cur] })), {});
    return result;
}
function normalizeSharedMappings(config, skip) {
    const rootTsConfigPath = (0, share_utils_1.findRootTsConfigJson)();
    const paths = (0, mapped_paths_1.getMappedPaths)({
        rootTsConfigPath,
        sharedMappings: config.sharedMappings,
    });
    const result = paths.filter((p) => !(0, default_skip_list_1.isInSkipList)(p.key, skip) && !p.key.includes('*'));
    if (paths.find((p) => p.key.includes('*'))) {
        logger_1.logger.warn('Sharing mapped paths with wildcards (*) not supported');
    }
    return result;
}
function getDefaultPlatform(cur) {
    if (default_server_deps_list_1.DEFAULT_SERVER_DEPS_LIST.find((e) => cur.startsWith(e))) {
        return 'node';
    }
    else {
        return 'browser';
    }
}
//# sourceMappingURL=with-native-federation.js.map